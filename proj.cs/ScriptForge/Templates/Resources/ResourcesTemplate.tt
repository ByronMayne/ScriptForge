<#@ template  debug="true" hostSpecific="false" language="C#" linePragmas="false" inherits="ScriptForge.BaseTemplate"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ScriptForge.Templates"#>
<#@ parameter type="System.String[]" name="m_ResourcePaths" #>
<# WriteClassOutline(); #>
<#+
    /// <summary>
    /// A function used to define any content that should exist in this classes namespace.
    /// </summary>
    public override void WriteNamespaceContent()
    {
    }

	/// <summary>
    /// This class contains all our GUI Content labels that we use in Script Forge
    /// </summary>
    public override void WriteClassContent()
    {
		ResourceFolder rootFolder = new ResourceFolder(string.Empty);

		for(int i = 0; i < m_ResourcePaths.Length; i++)
        {
			rootFolder.Add(m_ResourcePaths[i]);
        }

		// We want to skip over the root since it's empty
		for(int i = 0; i < rootFolder.children.Count; i++)
        {
			WriteTree(rootFolder.children[i]);
		}
    }

	private void WriteTree(ResourceNode node)
    {
		ResourceFolder asFolder = node as ResourceFolder;
		ResourceItem asItem = node as ResourceItem; 
		if(asFolder != null)
        {
			Write("public class ");
			WriteLine(asFolder.name);
			WriteLine("{");
			PushIndent(indent);
			for(int i = 0; i < asFolder.children.Count; i++)
			{
				WriteTree(asFolder.children[i]);
			}
			PopIndent();
			WriteLine("}");
			WriteLine(string.Empty);
        }
		else if (asItem != null)
        {
			Write("public const string ");
			Write(asItem.safeName.ToUpper());
			Write(" = \"");
			Write(asItem.name + asItem.extension);
			WriteLine("\";");
        }
    }
#>
