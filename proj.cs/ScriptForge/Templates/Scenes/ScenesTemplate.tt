<#@ template  debug="true" hostSpecific="false" language="C#" linePragmas="false" inherits="ScriptForge.BaseTemplate"#>
<#@ parameter type="System.String" name="m_EnumName" #>
<#@ parameter type="System.String[]" name="m_Scenes" #>
<#@ parameter type="System.Boolean" name="m_CreateEnum" #>
using System.Collections.ObjectModel;
<# WriteClassOutline(); #>
<#+
    /// <summary>
    /// A function used to define any content that should exist in this classes namespace.
    /// </summary>
    public override void WriteNamespaceContent()
    {
    }

	/// <summary>
    /// This class contains all our GUI Content labels that we use in Script Forge
    /// </summary>
    public override void WriteClassContent()
    {
		// Const elements
		for(int i = 0; i < m_Scenes.Length; i++)
        {
			Write("public const string ");
			Write(m_Scenes[i].ToUpper());
			Write(" = \"");
			Write(m_Scenes[i]);
			WriteLine("\";");
        }

		// Space
		WriteLine("");

		// Array
		WriteLine("// An array containing all the names of our scenes.");
		WriteLine("private static string[] m_Names = new string[]");
		WriteLine("{");
		PushIndent(indent);
		{
			for(int i = 0; i < m_Scenes.Length; i++)
			{
				Write("\"");
				Write(m_Scenes[i]);
				WriteLine("\",");
			}
        }
		PopIndent();
		WriteLine("};");
    }

	/// <summary>
    /// Invoked when the enum should be defined by this widget.
    /// </summary>
    public override void WriteEnumContent()
    {
		if(!m_CreateEnum)
        {
			return;
        }
#>
/// <summary>
/// An enum that contains the names of every scene that
/// is in your project.
/// </summary>
<#+
		Write("public enum ");
		WriteLine(m_EnumName);
		WriteLine("{");
		PushIndent(indent);
		for(int i = 0; i < m_Scenes.Length; i++)
        {
			Write(m_Scenes[i]);
			if( i < m_Scenes.Length - 1)
            {
				WriteLine(",");
            }
			else
            {
				WriteLine(string.Empty);
            }
        }
		PopIndent();
		WriteLine("}");
		WriteLine(string.Empty);
    }
	
#>
<#+ 
    /// <summary>
    /// Invoked when the helper functions should be defined by this widget.
    /// </summary>
	public override void WriteHelperFunctions()
    {
#>

/// <summary>		
/// Gets a read only version of the array of scene names in the build settings. 
/// </summary>		
public static ReadOnlyCollection<string> Names(string sceneName)
{		
    return new ReadOnlyCollection<string>(m_Names);
}

/// <summary>		
/// This function takes in a string name and returns 		
/// the scene ID with that name. If the name is invalid		
/// it return -1.		
/// </summary>		
/// <returns>The ID of the requested scene name.</returns>		
/// <param name="sceneName">A name of the scene you want the ID for.</param>		
public static int SceneNameToID(string sceneName)
{
    for (int i = 0; i < m_Names.Length; i++)
    {
		if(m_Names[i].Equals(sceneName, System.StringComparison.OrdinalIgnoreCase))
        {
			return i;
        }
    }
    //No scene found with that ID.		
    return -1;
}

/// <summary>		
/// This takes a scene ID and returns the name. If		
/// the ID is invalid it returns 'None'.		
/// </summary>		
/// <returns>The identifier of the scene.</returns>		
/// <param name="sceneIndex">An name of the scene with the requested ID</param>		
public static string SceneIndexToName(int sceneIndex)
{
    if (sceneIndex >= 0 && sceneIndex < m_Names.Length)
    {
        return m_Names[sceneIndex];
    }

    return string.Empty;
}

/// <summary>		
/// Determines if it is valid scene name.		
/// </summary>		
/// <returns><c>true</c> if is valid scene name the specified sceneName; otherwise, <c>false</c>.</returns>		
/// <param name="sceneName">The name of the scene in build settings.</param>		
public static bool IsValidSceneName(string sceneName)		
{		
	for( int i = 0; i < m_Names.Length; i++)		
	{		
		if(m_Names[i].Equals(sceneName, System.StringComparison.OrdinalIgnoreCase))
		{
			return true;	
		}	
	}		
			
	return false;		
}

/// <summary>		
/// Determines if is valid scene ID.		
/// </summary>		
/// <returns><c>true</c> if is valid scene I the specified anID; otherwise, <c>false</c>.</returns>		
/// <param name="anID">An I.</param>		
public static bool IsValidSceneID(int sceneID)		
{		
	return sceneID >= 0 && sceneID < m_Names.Length;
}
<#+
    }

#>

