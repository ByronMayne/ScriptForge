// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ScriptForge
{
    using System;
    using UnityEngine;
    using UnityEditor.Animations;
    using System.Collections.Generic;
    using ScriptForge.Utility;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class AnimationsTemplate : ScriptForge.BaseTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using UnityEngine;\r\n");
 WriteClassOutline(); 
            return this.GenerationEnvironment.ToString();
        }

    /// <summary>
    /// A function used to define any content that should exist in this classes namespace.
    /// </summary>
    public override void WriteNamespaceContent()
    {
    }

	/// <summary>
    /// This class contains all our GUI Content labels that we use in Script Forge
    /// </summary>
    public override void WriteClassContent()
    {
		foreach(var controllerClass in m_AnimatorControllerMap)
        {
			PushIndent(indent);
            {
				Write("public static class ");
				WriteLine(controllerClass.Key);
				WriteLine("{");
				PushIndent(indent);
                {

					// Clip Names
					if(m_GenerateClipNames)
                    {
						WriteLine("public static class Clips");
						WriteLine("{");
						PushIndent(indent);
						{
							// Constants 
							foreach(AnimatorController controller in controllerClass.Value)
							{
								foreach(AnimationClip animationClip in controller.animationClips)
								{
									WriteLine("/// <summary>");
									Write("/// Length: ");
									Write(animationClip.length.ToString("0.00"));
									WriteLine(" Seconds");
									WriteLine("/// </summary>");
									Write("public static readonly int ");
									Write(NamingUtility.ToVariableName(animationClip.name));
									WriteLine(";");
								}
							}
							
this.Write("\r\n/// <summary>\r\n/// Initializes all our Animations Clips with their hash the\r\n//" +
        "/ first time this class is referenced.\r\n/// </summary>\r\n");


							WriteLine("static Clips()");
							WriteLine("{");
							PushIndent(indent);
							{
								// Initialize Animation Hashes.
								if(m_GenerateClipNames)
								{
									foreach(AnimatorController controller in controllerClass.Value)
									{
										foreach(AnimationClip animationClip in controller.animationClips)
										{
											Write(NamingUtility.ToVariableName(animationClip.name));
											Write(" = ");
											Write("Animator.StringToHash(\"");
											Write(animationClip.name);
											WriteLine("\");");
										}
									}
								}
							}
							PopIndent();
							WriteLine("}");
						}
						PopIndent();
						WriteLine("}");
						WriteLine("");
                    }

					// Layer Names
                    if (m_GenerateLayerNames)
                    {
						WriteLine("public static class Layers");
						WriteLine("{");
						PushIndent(indent);
						{
							foreach (AnimatorController controller in controllerClass.Value)
							{
								foreach(var layer in controller.layers)
								{
									Write("public const string ");
									Write(NamingUtility.ToVariableName(layer.name));
									Write(" = \"");
									Write(layer.name);
									WriteLine("\";");
								}
							}
                        }
						PopIndent();
						WriteLine("}");
						WriteLine("");
                    }

					// Parameters
					if(m_GenerateParamaters)
                    {
						WriteLine("public static class Parameters");
						WriteLine("{");
						PushIndent(indent);
						{
							// Constants
							foreach (AnimatorController controller in controllerClass.Value)
							{
								foreach (AnimatorControllerParameter parameter in controller.parameters)
								{
									WriteLine("/// <summary>");
									Write("/// Type: ");
									WriteLine(parameter.type.ToString());
									WriteLine("/// </summary>");
									Write("public static int ");
									Write(NamingUtility.ToVariableName(parameter.name));
									Write(" = ");
									Write(parameter.nameHash.ToString());
									WriteLine(";");
								}
							}
							WriteLine("");
							// Utility Functions
							foreach (AnimatorController controller in controllerClass.Value)
							{
								foreach (AnimatorControllerParameter parameter in controller.parameters)
								{
									Write("public static void Set");
									Write(NamingUtility.ToVariableName(parameter.name));
									Write("(Animator animator");
                                    switch (parameter.type)
                                    {
                                        case AnimatorControllerParameterType.Trigger:
                                            WriteLine(")");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetTrigger(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(");");
                                            break;
                                        case AnimatorControllerParameterType.Bool:
                                            WriteLine(", bool value)");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetBool(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(", value);");
                                            break;
                                        case AnimatorControllerParameterType.Int:
                                            WriteLine(", int value)");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetInteger(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(", value);");
                                            break;
                                        case AnimatorControllerParameterType.Float:
                                            WriteLine(", float value)");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetFloat(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(", value);");
                                            break;
                                    }					
									PopIndent();
									WriteLine("}");		
									WriteLine("");	
								}
							}
                        }
						PopIndent();
						WriteLine("}");
						WriteLine("");
                    }


					// Initializer

                }
				PopIndent();
				WriteLine("}");
				WriteLine("");
            }
			PopIndent();
        }
    }

	/// <summary>
    /// Invoked when the enum should be defined by this widget.
    /// </summary>
    public override void WriteEnumContent()
    {
    }


private string _m_EnumNameField;

/// <summary>
/// Access the m_EnumName parameter of the template.
/// </summary>
private string m_EnumName
{
    get
    {
        return this._m_EnumNameField;
    }
}

private bool _m_GenerateClipNamesField;

/// <summary>
/// Access the m_GenerateClipNames parameter of the template.
/// </summary>
private bool m_GenerateClipNames
{
    get
    {
        return this._m_GenerateClipNamesField;
    }
}

private bool _m_GenerateLayerNamesField;

/// <summary>
/// Access the m_GenerateLayerNames parameter of the template.
/// </summary>
private bool m_GenerateLayerNames
{
    get
    {
        return this._m_GenerateLayerNamesField;
    }
}

private bool _m_GenerateParamatersField;

/// <summary>
/// Access the m_GenerateParamaters parameter of the template.
/// </summary>
private bool m_GenerateParamaters
{
    get
    {
        return this._m_GenerateParamatersField;
    }
}

private global::System.Collections.Generic.Dictionary<string, List<AnimatorController>> _m_AnimatorControllerMapField;

/// <summary>
/// Access the m_AnimatorControllerMap parameter of the template.
/// </summary>
private global::System.Collections.Generic.Dictionary<string, List<AnimatorController>> m_AnimatorControllerMap
{
    get
    {
        return this._m_AnimatorControllerMapField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool m_EnumNameValueAcquired = false;
if (this.Session.ContainsKey("m_EnumName"))
{
    this._m_EnumNameField = ((string)(this.Session["m_EnumName"]));
    m_EnumNameValueAcquired = true;
}
if ((m_EnumNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_EnumName");
    if ((data != null))
    {
        this._m_EnumNameField = ((string)(data));
    }
}
bool m_GenerateClipNamesValueAcquired = false;
if (this.Session.ContainsKey("m_GenerateClipNames"))
{
    this._m_GenerateClipNamesField = ((bool)(this.Session["m_GenerateClipNames"]));
    m_GenerateClipNamesValueAcquired = true;
}
if ((m_GenerateClipNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_GenerateClipNames");
    if ((data != null))
    {
        this._m_GenerateClipNamesField = ((bool)(data));
    }
}
bool m_GenerateLayerNamesValueAcquired = false;
if (this.Session.ContainsKey("m_GenerateLayerNames"))
{
    this._m_GenerateLayerNamesField = ((bool)(this.Session["m_GenerateLayerNames"]));
    m_GenerateLayerNamesValueAcquired = true;
}
if ((m_GenerateLayerNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_GenerateLayerNames");
    if ((data != null))
    {
        this._m_GenerateLayerNamesField = ((bool)(data));
    }
}
bool m_GenerateParamatersValueAcquired = false;
if (this.Session.ContainsKey("m_GenerateParamaters"))
{
    this._m_GenerateParamatersField = ((bool)(this.Session["m_GenerateParamaters"]));
    m_GenerateParamatersValueAcquired = true;
}
if ((m_GenerateParamatersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_GenerateParamaters");
    if ((data != null))
    {
        this._m_GenerateParamatersField = ((bool)(data));
    }
}
bool m_AnimatorControllerMapValueAcquired = false;
if (this.Session.ContainsKey("m_AnimatorControllerMap"))
{
    this._m_AnimatorControllerMapField = ((global::System.Collections.Generic.Dictionary<string, List<AnimatorController>>)(this.Session["m_AnimatorControllerMap"]));
    m_AnimatorControllerMapValueAcquired = true;
}
if ((m_AnimatorControllerMapValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_AnimatorControllerMap");
    if ((data != null))
    {
        this._m_AnimatorControllerMapField = ((global::System.Collections.Generic.Dictionary<string, List<AnimatorController>>)(data));
    }
}


    }
}


    }
}
