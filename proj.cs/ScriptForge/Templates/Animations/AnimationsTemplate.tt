<#@ template  debug="true" hostSpecific="false" language="C#" linePragmas="false" inherits="ScriptForge.BaseTemplate"#>
<#@ parameter type="System.String" name="m_EnumName" #>
<#@ parameter type="System.Boolean" name="m_GenerateClipNames" #>
<#@ parameter type="System.Boolean" name="m_GenerateLayerNames" #>
<#@ parameter type="System.Boolean" name="m_GenerateParamaters" #>
<#@ import namespace="System" #>
<#@ import namespace="UnityEngine" #>
<#@ import namespace="UnityEditor.Animations" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ScriptForge.Utility"#>
<#@ parameter type="System.Collections.Generic.Dictionary<string, List<AnimatorController>>" name="m_AnimatorControllerMap" #>
using UnityEngine;
<# WriteClassOutline(); #>
<#+
    /// <summary>
    /// A function used to define any content that should exist in this classes namespace.
    /// </summary>
    public override void WriteNamespaceContent()
    {
    }

	/// <summary>
    /// This class contains all our GUI Content labels that we use in Script Forge
    /// </summary>
    public override void WriteClassContent()
    {
		foreach(var controllerClass in m_AnimatorControllerMap)
        {
			PushIndent(indent);
            {
				Write("public static class ");
				WriteLine(controllerClass.Key);
				WriteLine("{");
				PushIndent(indent);
                {

					// Clip Names
					if(m_GenerateClipNames)
                    {
						WriteLine("public static class Clips");
						WriteLine("{");
						PushIndent(indent);
						{
							// Constants 
							foreach(AnimatorController controller in controllerClass.Value)
							{
								foreach(AnimationClip animationClip in controller.animationClips)
								{
									WriteLine("/// <summary>");
									Write("/// Length: ");
									Write(animationClip.length.ToString("0.00"));
									WriteLine(" Seconds");
									WriteLine("/// </summary>");
									Write("public static readonly int ");
									Write(NamingUtility.ToVariableName(animationClip.name));
									WriteLine(";");
								}
							}
							#>

/// <summary>
/// Initializes all our Animations Clips with their hash the
/// first time this class is referenced.
/// </summary>
<#+
							WriteLine("static Clips()");
							WriteLine("{");
							PushIndent(indent);
							{
								// Initialize Animation Hashes.
								if(m_GenerateClipNames)
								{
									foreach(AnimatorController controller in controllerClass.Value)
									{
										foreach(AnimationClip animationClip in controller.animationClips)
										{
											Write(NamingUtility.ToVariableName(animationClip.name));
											Write(" = ");
											Write("Animator.StringToHash(\"");
											Write(animationClip.name);
											WriteLine("\");");
										}
									}
								}
							}
							PopIndent();
							WriteLine("}");
						}
						PopIndent();
						WriteLine("}");
						WriteLine("");
                    }

					// Layer Names
                    if (m_GenerateLayerNames)
                    {
						WriteLine("public static class Layers");
						WriteLine("{");
						PushIndent(indent);
						{
							foreach (AnimatorController controller in controllerClass.Value)
							{
								foreach(var layer in controller.layers)
								{
									Write("public const string ");
									Write(NamingUtility.ToVariableName(layer.name));
									Write(" = \"");
									Write(layer.name);
									WriteLine("\";");
								}
							}
                        }
						PopIndent();
						WriteLine("}");
						WriteLine("");
                    }

					// Parameters
					if(m_GenerateParamaters)
                    {
						WriteLine("public static class Parameters");
						WriteLine("{");
						PushIndent(indent);
						{
							// Constants
							foreach (AnimatorController controller in controllerClass.Value)
							{
								foreach (AnimatorControllerParameter parameter in controller.parameters)
								{
									WriteLine("/// <summary>");
									Write("/// Type: ");
									WriteLine(parameter.type.ToString());
									WriteLine("/// </summary>");
									Write("public static int ");
									Write(NamingUtility.ToVariableName(parameter.name));
									Write(" = ");
									Write(parameter.nameHash.ToString());
									WriteLine(";");
								}
							}
							WriteLine("");
							// Utility Functions
							foreach (AnimatorController controller in controllerClass.Value)
							{
								foreach (AnimatorControllerParameter parameter in controller.parameters)
								{
									Write("public static void Set");
									Write(NamingUtility.ToVariableName(parameter.name));
									Write("(Animator animator");
                                    switch (parameter.type)
                                    {
                                        case AnimatorControllerParameterType.Trigger:
                                            WriteLine(")");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetTrigger(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(");");
                                            break;
                                        case AnimatorControllerParameterType.Bool:
                                            WriteLine(", bool value)");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetBool(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(", value);");
                                            break;
                                        case AnimatorControllerParameterType.Int:
                                            WriteLine(", int value)");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetInteger(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(", value);");
                                            break;
                                        case AnimatorControllerParameterType.Float:
                                            WriteLine(", float value)");
											WriteLine("{");
											PushIndent(indent);
											Write("animator.SetFloat(");
											Write(NamingUtility.ToVariableName(parameter.name));
											WriteLine(", value);");
                                            break;
                                    }					
									PopIndent();
									WriteLine("}");		
									WriteLine("");	
								}
							}
                        }
						PopIndent();
						WriteLine("}");
						WriteLine("");
                    }


					// Initializer

                }
				PopIndent();
				WriteLine("}");
				WriteLine("");
            }
			PopIndent();
        }
    }

	/// <summary>
    /// Invoked when the enum should be defined by this widget.
    /// </summary>
    public override void WriteEnumContent()
    {
    }
#>
