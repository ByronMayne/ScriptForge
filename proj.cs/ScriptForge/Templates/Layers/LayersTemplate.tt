<#@ template  debug="true" hostSpecific="false" language="C#" linePragmas="false" inherits="ScriptForge.BaseTemplate"#>
<#@ parameter type="System.String" name="m_EnumName" #>
<#@ parameter type="System.String[]" name="m_Layers" #>
<#@ parameter type="System.Boolean" name="m_CreateEnum" #>
<#@ parameter type="System.Boolean" name="m_CreateBitwise" #>
<# WriteClassOutline(); #>
<#+
    /// <summary>
    /// A function used to define any content that should exist in this classes namespace.
    /// </summary>
    public override void WriteNamespaceContent()
    {
    }

	/// <summary>
    /// This class contains all our GUI Content labels that we use in Script Forge
    /// </summary>
    public override void WriteClassContent()
    {
		WriteLine("public static class Integer");
		WriteLine("{");
		PushIndent(indent);
        {
			for(int i = 0; i < m_Layers.Length; i++)
			{
				if(!string.IsNullOrEmpty(m_Layers[i]))
				{
					Write("public const int ");
					Write(m_Layers[i].ToUpper());
					Write(" = ");
					Write(i.ToString());
					WriteLine(";");
				}
			}
		}
		PopIndent();
		WriteLine("}");

		if(m_CreateBitwise)
        {
			WriteLine("public static class Bitwise");
			WriteLine("{");
			PushIndent(indent);
            {
				for(int i = 0; i < m_Layers.Length; i++)
				{
					if(!string.IsNullOrEmpty(m_Layers[i]))
					{
						Write("public static readonly int ");
						Write(m_Layers[i]);
						Write(" = 1 << ");
						Write(i.ToString());
						WriteLine(";");
					}
                }
            }
			PopIndent();
			WriteLine("}");
        }
    }

	/// <summary>
    /// Invoked when the enum should be defined by this widget.
    /// </summary>
    public override void WriteEnumContent()
    {
		if(!m_CreateEnum)
        {
			return;
        }
#>
/// <summary>
/// An enum that contains the names of every scene that
/// is in your project.
/// </summary>
<#+
		Write("public enum ");
		WriteLine(m_EnumName);
		WriteLine("{");
		PushIndent(indent);
		for(int i = 0; i < m_Layers.Length; i++)
        {
			if(!string.IsNullOrEmpty(m_Layers[i]))
            {
				Write(m_Layers[i]);
				Write(" = ");
				Write(i.ToString());
				if( i < m_Layers.Length - 1)
				{
					WriteLine(",");
				}
				else
				{
					WriteLine(string.Empty);
				}
            }
        }
		PopIndent();
		WriteLine("}");
		WriteLine(string.Empty);
    }
#>
