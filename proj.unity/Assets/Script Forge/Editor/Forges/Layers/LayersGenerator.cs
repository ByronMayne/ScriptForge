//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScriptForge {
    using System;
    
    
    public partial class LayersGenerator : LayersGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 2
            this.Write(@"
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ScriptForge. To rebuild the code go to 
// Window->Script Forge and on that window hit generate. 
// </auto-generated>
//------------------------------------------------------------------------------
");
            
            #line default
            #line hidden
            
            #line 9 
 if( NameSpace != "") { 
            
            #line default
            #line hidden
            
            #line 10 
            this.Write("namespace ");
            
            #line default
            #line hidden
            
            #line 10 
            this.Write(this.ToStringHelper.ToStringWithCulture( NameSpace ));
            
            #line default
            #line hidden
            
            #line 10 
            this.Write(" \n{\n");
            
            #line default
            #line hidden
            
            #line 12 
}
            
            #line default
            #line hidden
            
            #line 13  
            this.Write("\n\t/// <summary>\n\t/// Generates a wrapper for ");
            
            #line default
            #line hidden
            
            #line 15  
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 15  
            this.Write(".\n\t/// </summary>\n\tpublic static partial class ");
            
            #line default
            #line hidden
            
            #line 17  
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 17  
            this.Write("\n\t{\n\n\t\t/// <summary>\n\t\t/// Bitwise values are used any layer masking. For example" +
                    " ( Default | TransparentFX ) \n\t\t/// </summary>\n\t\tpublic static class Bitwise\n\t\t{" +
                    "\n\t");
            
            #line default
            #line hidden
            
            #line 25  
 for (int i = 0; i < source.Length; i++)
	{
		if( source[i] == "" )
			continue; 

	
            
            #line default
            #line hidden
            
            #line 31  
            this.Write("\t\t\tpublic static readonly int ");
            
            #line default
            #line hidden
            
            #line 31  
            this.Write(this.ToStringHelper.ToStringWithCulture( source[i].Replace(" ", "_") ));
            
            #line default
            #line hidden
            
            #line 31  
            this.Write(" = 1 << Integer.");
            
            #line default
            #line hidden
            
            #line 31  
            this.Write(this.ToStringHelper.ToStringWithCulture( source[i].Replace(" ", "_") ));
            
            #line default
            #line hidden
            
            #line 31  
            this.Write(";\n\t");
            
            #line default
            #line hidden
            
            #line 32  
		}
	    
            
            #line default
            #line hidden
            
            #line 34  
            this.Write("\t\t}\n\n\t\t/// <summary>\n\t\t/// Integer values are used any layer checking.\n\t\t/// </su" +
                    "mmary>\n\t\tpublic static class Integer\n\t\t{\n\t");
            
            #line default
            #line hidden
            
            #line 41  
 for (int i = 0; i < source.Length; i++)
	{
		if( source[i] == "" )
			continue; 
	
            
            #line default
            #line hidden
            
            #line 46  
            this.Write("\t\t\tpublic static readonly int ");
            
            #line default
            #line hidden
            
            #line 46  
            this.Write(this.ToStringHelper.ToStringWithCulture( source[i].Replace(" ", "_") ));
            
            #line default
            #line hidden
            
            #line 46  
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 46  
            this.Write(this.ToStringHelper.ToStringWithCulture( i ));
            
            #line default
            #line hidden
            
            #line 46  
            this.Write(";\n\t");
            
            #line default
            #line hidden
            
            #line 47  
		}
	    
            
            #line default
            #line hidden
            
            #line 49  
            this.Write("\t\t}\n\n\t}\n");
            
            #line default
            #line hidden
            
            #line 52  
 if( NameSpace != "") { 
            
            #line default
            #line hidden
            
            #line 53  
            this.Write("}\n");
            
            #line default
            #line hidden
            
            #line 54  
}
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        protected virtual void Initialize() {
        }
    }
    
    public class LayersGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((this.formatProvider == null)) {
                        throw new global::System.ArgumentNullException("formatProvider");
                    }
                    this.formatProvider = value;
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
