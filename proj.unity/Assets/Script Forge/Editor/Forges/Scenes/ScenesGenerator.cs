//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScriptForge {
    using System;
    
    
    public partial class ScenesGenerator : ScenesGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 2  
            this.Write("\n/// <summary>\n/// This is an enum used for all your scenes. It can be\n/// used a" +
                    "s an int to represent the scene ID number. \n/// </summary>\n");
            
            #line default
            #line hidden
            
            #line 7  
 if( NameSpace != "" ) { 
            
            #line default
            #line hidden
            
            #line 8  
            this.Write("namespace ");
            
            #line default
            #line hidden
            
            #line 8  
            this.Write(this.ToStringHelper.ToStringWithCulture( NameSpace ));
            
            #line default
            #line hidden
            
            #line 8  
            this.Write("\n{\n");
            
            #line default
            #line hidden
            
            #line 10  
 } 
            
            #line default
            #line hidden
            
            #line 11  
            this.Write("\tpublic enum ");
            
            #line default
            #line hidden
            
            #line 11  
            this.Write(this.ToStringHelper.ToStringWithCulture( Enumname ));
            
            #line default
            #line hidden
            
            #line 11  
            this.Write("\n\t{\n\t");
            
            #line default
            #line hidden
            
            #line 13  
 for( int i = 0; i < source.Length; i++ ) { 
	
            
            #line default
            #line hidden
            
            #line 15  
            this.Write("\t");
            
            #line default
            #line hidden
            
            #line 15  
            this.Write(this.ToStringHelper.ToStringWithCulture( source[i].Replace(" ", "_") ));
            
            #line default
            #line hidden
            
            #line 15  
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 15  
            this.Write(this.ToStringHelper.ToStringWithCulture( i ));
            
            #line default
            #line hidden
            
            #line 15  
            this.Write(",\n\t");
            
            #line default
            #line hidden
            
            #line 16  
}
	
            
            #line default
            #line hidden
            
            #line 18  
            this.Write("}\n\n\tpublic static class ");
            
            #line default
            #line hidden
            
            #line 20  
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 20  
            this.Write("\n\t{\t\n\t\tprivate static string[] sceneNames = new string[");
            
            #line default
            #line hidden
            
            #line 22  
            this.Write(this.ToStringHelper.ToStringWithCulture( source.Length ));
            
            #line default
            #line hidden
            
            #line 22  
            this.Write("] { ");
            
            #line default
            #line hidden
            
            #line 22  
 for( int i = 0; i < source.Length; i++ ) {
            
            #line default
            #line hidden
            
            #line 23  
            this.Write("\"");
            
            #line default
            #line hidden
            
            #line 23  
            this.Write(this.ToStringHelper.ToStringWithCulture( source[i]));
            
            #line default
            #line hidden
            
            #line 23  
            this.Write("\", ");
            
            #line default
            #line hidden
            
            #line 23  
}
            
            #line default
            #line hidden
            
            #line 24  
            this.Write(" };\n\t\t");
            
            #line default
            #line hidden
            
            #line 25  
 for( int i = 0; i < source.Length; i++ ) {
	  
            
            #line default
            #line hidden
            
            #line 27  
            this.Write("public const string ");
            
            #line default
            #line hidden
            
            #line 27  
            this.Write(this.ToStringHelper.ToStringWithCulture( source[i].Replace(" ", "_") ));
            
            #line default
            #line hidden
            
            #line 27  
            this.Write("  = \"");
            
            #line default
            #line hidden
            
            #line 27  
            this.Write(this.ToStringHelper.ToStringWithCulture( source[i]));
            
            #line default
            #line hidden
            
            #line 27  
            this.Write("\";\n\t  ");
            
            #line default
            #line hidden
            
            #line 28  
}
            
            #line default
            #line hidden
            
            #line 29  
            this.Write(@"

		/// <summary>
		/// This function takes in a string name and returns 
		/// the scene ID with that name. If the name is invalid
		/// it return -1.
		/// </summary>
		/// <returns>The ID of the requested scene name.</returns>
		/// <param name=""aName"">A name of the scene you want the ID for.</param>
		public static int SceneNameToID(string aName)
		{
			for( int i = 0; i < ");
            
            #line default
            #line hidden
            
            #line 40  
            this.Write(this.ToStringHelper.ToStringWithCulture( source.Length ));
            
            #line default
            #line hidden
            
            #line 40  
            this.Write(@"; i++)
			{
				if( sceneNames[i] == aName )
					return i;
			}
			
			//No scene found with that ID.
			return -1;
		}
		
		/// <summary>
		/// This takes a scene ID and returns the name. If
		/// the ID is invalid it returns 'None'.
		/// </summary>
		/// <returns>The identifier of the scene.</returns>
		/// <param name=""anID"">An name of the scene with the requested ID</param>
		public static string SceneIDToName(int anID)
		{
			if( anID >= 0 && anID < ");
            
            #line default
            #line hidden
            
            #line 58  
            this.Write(this.ToStringHelper.ToStringWithCulture( source.Length ));
            
            #line default
            #line hidden
            
            #line 58  
            this.Write(@" )
				return sceneNames[anID];
			else
				return ""None"";
		}
		
		/// <summary>
		/// Determines if it is valid scene name.
		/// </summary>
		/// <returns><c>true</c> if is valid scene name the specified aName; otherwise, <c>false</c>.</returns>
		/// <param name=""aName"">A name.</param>
		public static bool IsValidSceneName(string aName)
		{
			for( int i = 0; i < ");
            
            #line default
            #line hidden
            
            #line 71  
            this.Write(this.ToStringHelper.ToStringWithCulture( source.Length ));
            
            #line default
            #line hidden
            
            #line 71  
            this.Write(@"; i++)
			{
				if( sceneNames[i] == aName )
					return true;
			}
			
			return false;
		}
		
		/// <summary>
		/// Determines if is valid scene ID.
		/// </summary>
		/// <returns><c>true</c> if is valid scene I the specified anID; otherwise, <c>false</c>.</returns>
		/// <param name=""anID"">An I.</param>
		public static bool IsValidSceneID(int anID)
		{
			if( anID >= 0 && anID < ");
            
            #line default
            #line hidden
            
            #line 87  
            this.Write(this.ToStringHelper.ToStringWithCulture( source.Length ));
            
            #line default
            #line hidden
            
            #line 87  
            this.Write(" )\n\t\t\t\t\treturn true;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t}\n\t}\n");
            
            #line default
            #line hidden
            
            #line 93  
 if( NameSpace != "" ) { 
            
            #line default
            #line hidden
            
            #line 94  
            this.Write("}\n");
            
            #line default
            #line hidden
            
            #line 95  
 } 
            
            #line default
            #line hidden
            
            #line 96  
            this.Write("\t\t\n\t\n\t\t\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        protected virtual void Initialize() {
        }
    }
    
    public class ScenesGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((this.formatProvider == null)) {
                        throw new global::System.ArgumentNullException("formatProvider");
                    }
                    this.formatProvider = value;
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
