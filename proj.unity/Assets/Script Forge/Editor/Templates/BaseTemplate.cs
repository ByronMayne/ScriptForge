// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ScriptForge
{
    using System;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class BaseTemplate : BaseTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
 WriteClassOutline();
            return this.GenerationEnvironment.ToString();
        }

	public string indent
    {
		get { return m_Indent; }
    }

    /// <summary>
    /// A function used to define any content that should exist in this classes namespace.
    /// </summary>
    public virtual void WriteNamespaceContent()
    {
        WriteLine("// No namespace content defined");
    }

    /// <summary>
    /// This class contains all our GUI Content labels that we use in Script Forge
    /// </summary>
    public virtual void WriteClassContent()
    {
        WriteLine("// No class content defined");
    }

    /// <summary>
    /// Invoked when the enum should be defined by this widget.
    /// </summary>
    public virtual void WriteEnumContent()
    {

    }

    /// <summary>
    /// Invoked when the helper functions should be defined by this widget.
    /// </summary>
	public virtual void WriteHelperFunctions()
    {

    }

    /// <summary>
    /// Writes the namespace (if it has one) and the class and all braces. This function
    /// will then call WriteNamespaceContent for stuff in that scope and WriteClassContent()
    /// for everything contained in that scope.
    /// </summary>
    public virtual void WriteClassOutline()
    {

this.Write("//------------------------------------------------------------------------------\r" +
        "\n// <auto-generated>\r\n// ");

this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(m_SaveLocation)));

this.Write("\r\n// This code was generated by ScriptForge. To rebuild the code go to \r\n// Proje" +
        "ct Settings ->Script Forge and on that window hit generate all. Any\r\n// changes " +
        "made to this script will be overwritten.  \r\n// Asset Hash: ");

this.Write(this.ToStringHelper.ToStringWithCulture(m_AssetHash));

this.Write("\r\n// </auto-generated>\r\n//-------------------------------------------------------" +
        "-----------------------\r\n");


        bool hasNamespace = !string.IsNullOrEmpty(m_Namespace);
    
        if(hasNamespace)
        {
            Write("namespace ");
            WriteLine(m_Namespace);
            WriteLine("{");
            PushIndent(m_Indent);
        }

        WriteNamespaceContent();

        WriteEnumContent();

        {	// Start class
            Write("public ");
            if(m_IsStaticClass)
            {
                Write("static ");
            }

            if(m_IsPartialClass)
            {
                Write("partial ");
            }
            Write("class ");
            WriteLine(m_ClassName);
            WriteLine("{");
            PushIndent(m_Indent);
            WriteEnumContent();
            WriteClassContent();
			WriteHelperFunctions();
            PopIndent();
            Write("}");
        } // End Class
        if(hasNamespace)
        {
            PopIndent();
            GenerationEnvironment.AppendLine();
            Write("}");
        }
    }


private string _m_ClassNameField;

/// <summary>
/// Access the m_ClassName parameter of the template.
/// </summary>
private string m_ClassName
{
    get
    {
        return this._m_ClassNameField;
    }
}

private string _m_NamespaceField;

/// <summary>
/// Access the m_Namespace parameter of the template.
/// </summary>
private string m_Namespace
{
    get
    {
        return this._m_NamespaceField;
    }
}

private bool _m_IsPartialClassField;

/// <summary>
/// Access the m_IsPartialClass parameter of the template.
/// </summary>
private bool m_IsPartialClass
{
    get
    {
        return this._m_IsPartialClassField;
    }
}

private bool _m_IsStaticClassField;

/// <summary>
/// Access the m_IsStaticClass parameter of the template.
/// </summary>
private bool m_IsStaticClass
{
    get
    {
        return this._m_IsStaticClassField;
    }
}

private string _m_IndentField;

/// <summary>
/// Access the m_Indent parameter of the template.
/// </summary>
private string m_Indent
{
    get
    {
        return this._m_IndentField;
    }
}

private string _m_SaveLocationField;

/// <summary>
/// Access the m_SaveLocation parameter of the template.
/// </summary>
private string m_SaveLocation
{
    get
    {
        return this._m_SaveLocationField;
    }
}

private string _m_AssetHashField;

/// <summary>
/// Access the m_AssetHash parameter of the template.
/// </summary>
private string m_AssetHash
{
    get
    {
        return this._m_AssetHashField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool m_ClassNameValueAcquired = false;
if (this.Session.ContainsKey("m_ClassName"))
{
    this._m_ClassNameField = ((string)(this.Session["m_ClassName"]));
    m_ClassNameValueAcquired = true;
}
if ((m_ClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_ClassName");
    if ((data != null))
    {
        this._m_ClassNameField = ((string)(data));
    }
}
bool m_NamespaceValueAcquired = false;
if (this.Session.ContainsKey("m_Namespace"))
{
    this._m_NamespaceField = ((string)(this.Session["m_Namespace"]));
    m_NamespaceValueAcquired = true;
}
if ((m_NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_Namespace");
    if ((data != null))
    {
        this._m_NamespaceField = ((string)(data));
    }
}
bool m_IsPartialClassValueAcquired = false;
if (this.Session.ContainsKey("m_IsPartialClass"))
{
    this._m_IsPartialClassField = ((bool)(this.Session["m_IsPartialClass"]));
    m_IsPartialClassValueAcquired = true;
}
if ((m_IsPartialClassValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_IsPartialClass");
    if ((data != null))
    {
        this._m_IsPartialClassField = ((bool)(data));
    }
}
bool m_IsStaticClassValueAcquired = false;
if (this.Session.ContainsKey("m_IsStaticClass"))
{
    this._m_IsStaticClassField = ((bool)(this.Session["m_IsStaticClass"]));
    m_IsStaticClassValueAcquired = true;
}
if ((m_IsStaticClassValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_IsStaticClass");
    if ((data != null))
    {
        this._m_IsStaticClassField = ((bool)(data));
    }
}
bool m_IndentValueAcquired = false;
if (this.Session.ContainsKey("m_Indent"))
{
    this._m_IndentField = ((string)(this.Session["m_Indent"]));
    m_IndentValueAcquired = true;
}
if ((m_IndentValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_Indent");
    if ((data != null))
    {
        this._m_IndentField = ((string)(data));
    }
}
bool m_SaveLocationValueAcquired = false;
if (this.Session.ContainsKey("m_SaveLocation"))
{
    this._m_SaveLocationField = ((string)(this.Session["m_SaveLocation"]));
    m_SaveLocationValueAcquired = true;
}
if ((m_SaveLocationValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_SaveLocation");
    if ((data != null))
    {
        this._m_SaveLocationField = ((string)(data));
    }
}
bool m_AssetHashValueAcquired = false;
if (this.Session.ContainsKey("m_AssetHash"))
{
    this._m_AssetHashField = ((string)(this.Session["m_AssetHash"]));
    m_AssetHashValueAcquired = true;
}
if ((m_AssetHashValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_AssetHash");
    if ((data != null))
    {
        this._m_AssetHashField = ((string)(data));
    }
}


    }
}


    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class BaseTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
